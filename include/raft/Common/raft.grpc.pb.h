// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: raft.proto
#ifndef GRPC_raft_2eproto__INCLUDED
#define GRPC_raft_2eproto__INCLUDED

#include "raft.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace raft {
namespace rpc {

class RaftRpc final {
 public:
  static constexpr char const* service_full_name() {
    return "raft.rpc.RaftRpc";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RequestAE(::grpc::ClientContext* context, const ::raft::rpc::RequestAppendEntries& request, ::raft::rpc::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raft::rpc::Reply>> AsyncRequestAE(::grpc::ClientContext* context, const ::raft::rpc::RequestAppendEntries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raft::rpc::Reply>>(AsyncRequestAERaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raft::rpc::Reply>> PrepareAsyncRequestAE(::grpc::ClientContext* context, const ::raft::rpc::RequestAppendEntries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raft::rpc::Reply>>(PrepareAsyncRequestAERaw(context, request, cq));
    }
    virtual ::grpc::Status RequestV(::grpc::ClientContext* context, const ::raft::rpc::RequestVote& request, ::raft::rpc::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raft::rpc::Reply>> AsyncRequestV(::grpc::ClientContext* context, const ::raft::rpc::RequestVote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raft::rpc::Reply>>(AsyncRequestVRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raft::rpc::Reply>> PrepareAsyncRequestV(::grpc::ClientContext* context, const ::raft::rpc::RequestVote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raft::rpc::Reply>>(PrepareAsyncRequestVRaw(context, request, cq));
    }
    virtual ::grpc::Status ReplyAE(::grpc::ClientContext* context, const ::raft::rpc::ReplyAppendEntries& request, ::raft::rpc::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raft::rpc::Reply>> AsyncReplyAE(::grpc::ClientContext* context, const ::raft::rpc::ReplyAppendEntries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raft::rpc::Reply>>(AsyncReplyAERaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raft::rpc::Reply>> PrepareAsyncReplyAE(::grpc::ClientContext* context, const ::raft::rpc::ReplyAppendEntries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raft::rpc::Reply>>(PrepareAsyncReplyAERaw(context, request, cq));
    }
    virtual ::grpc::Status ReplyV(::grpc::ClientContext* context, const ::raft::rpc::ReplyVote& request, ::raft::rpc::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raft::rpc::Reply>> AsyncReplyV(::grpc::ClientContext* context, const ::raft::rpc::ReplyVote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raft::rpc::Reply>>(AsyncReplyVRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raft::rpc::Reply>> PrepareAsyncReplyV(::grpc::ClientContext* context, const ::raft::rpc::ReplyVote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raft::rpc::Reply>>(PrepareAsyncReplyVRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void RequestAE(::grpc::ClientContext* context, const ::raft::rpc::RequestAppendEntries* request, ::raft::rpc::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestAE(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raft::rpc::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestV(::grpc::ClientContext* context, const ::raft::rpc::RequestVote* request, ::raft::rpc::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestV(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raft::rpc::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReplyAE(::grpc::ClientContext* context, const ::raft::rpc::ReplyAppendEntries* request, ::raft::rpc::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReplyAE(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raft::rpc::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReplyV(::grpc::ClientContext* context, const ::raft::rpc::ReplyVote* request, ::raft::rpc::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReplyV(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raft::rpc::Reply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raft::rpc::Reply>* AsyncRequestAERaw(::grpc::ClientContext* context, const ::raft::rpc::RequestAppendEntries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raft::rpc::Reply>* PrepareAsyncRequestAERaw(::grpc::ClientContext* context, const ::raft::rpc::RequestAppendEntries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raft::rpc::Reply>* AsyncRequestVRaw(::grpc::ClientContext* context, const ::raft::rpc::RequestVote& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raft::rpc::Reply>* PrepareAsyncRequestVRaw(::grpc::ClientContext* context, const ::raft::rpc::RequestVote& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raft::rpc::Reply>* AsyncReplyAERaw(::grpc::ClientContext* context, const ::raft::rpc::ReplyAppendEntries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raft::rpc::Reply>* PrepareAsyncReplyAERaw(::grpc::ClientContext* context, const ::raft::rpc::ReplyAppendEntries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raft::rpc::Reply>* AsyncReplyVRaw(::grpc::ClientContext* context, const ::raft::rpc::ReplyVote& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raft::rpc::Reply>* PrepareAsyncReplyVRaw(::grpc::ClientContext* context, const ::raft::rpc::ReplyVote& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RequestAE(::grpc::ClientContext* context, const ::raft::rpc::RequestAppendEntries& request, ::raft::rpc::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>> AsyncRequestAE(::grpc::ClientContext* context, const ::raft::rpc::RequestAppendEntries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>>(AsyncRequestAERaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>> PrepareAsyncRequestAE(::grpc::ClientContext* context, const ::raft::rpc::RequestAppendEntries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>>(PrepareAsyncRequestAERaw(context, request, cq));
    }
    ::grpc::Status RequestV(::grpc::ClientContext* context, const ::raft::rpc::RequestVote& request, ::raft::rpc::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>> AsyncRequestV(::grpc::ClientContext* context, const ::raft::rpc::RequestVote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>>(AsyncRequestVRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>> PrepareAsyncRequestV(::grpc::ClientContext* context, const ::raft::rpc::RequestVote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>>(PrepareAsyncRequestVRaw(context, request, cq));
    }
    ::grpc::Status ReplyAE(::grpc::ClientContext* context, const ::raft::rpc::ReplyAppendEntries& request, ::raft::rpc::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>> AsyncReplyAE(::grpc::ClientContext* context, const ::raft::rpc::ReplyAppendEntries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>>(AsyncReplyAERaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>> PrepareAsyncReplyAE(::grpc::ClientContext* context, const ::raft::rpc::ReplyAppendEntries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>>(PrepareAsyncReplyAERaw(context, request, cq));
    }
    ::grpc::Status ReplyV(::grpc::ClientContext* context, const ::raft::rpc::ReplyVote& request, ::raft::rpc::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>> AsyncReplyV(::grpc::ClientContext* context, const ::raft::rpc::ReplyVote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>>(AsyncReplyVRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>> PrepareAsyncReplyV(::grpc::ClientContext* context, const ::raft::rpc::ReplyVote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>>(PrepareAsyncReplyVRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RequestAE(::grpc::ClientContext* context, const ::raft::rpc::RequestAppendEntries* request, ::raft::rpc::Reply* response, std::function<void(::grpc::Status)>) override;
      void RequestAE(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raft::rpc::Reply* response, std::function<void(::grpc::Status)>) override;
      void RequestV(::grpc::ClientContext* context, const ::raft::rpc::RequestVote* request, ::raft::rpc::Reply* response, std::function<void(::grpc::Status)>) override;
      void RequestV(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raft::rpc::Reply* response, std::function<void(::grpc::Status)>) override;
      void ReplyAE(::grpc::ClientContext* context, const ::raft::rpc::ReplyAppendEntries* request, ::raft::rpc::Reply* response, std::function<void(::grpc::Status)>) override;
      void ReplyAE(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raft::rpc::Reply* response, std::function<void(::grpc::Status)>) override;
      void ReplyV(::grpc::ClientContext* context, const ::raft::rpc::ReplyVote* request, ::raft::rpc::Reply* response, std::function<void(::grpc::Status)>) override;
      void ReplyV(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raft::rpc::Reply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>* AsyncRequestAERaw(::grpc::ClientContext* context, const ::raft::rpc::RequestAppendEntries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>* PrepareAsyncRequestAERaw(::grpc::ClientContext* context, const ::raft::rpc::RequestAppendEntries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>* AsyncRequestVRaw(::grpc::ClientContext* context, const ::raft::rpc::RequestVote& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>* PrepareAsyncRequestVRaw(::grpc::ClientContext* context, const ::raft::rpc::RequestVote& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>* AsyncReplyAERaw(::grpc::ClientContext* context, const ::raft::rpc::ReplyAppendEntries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>* PrepareAsyncReplyAERaw(::grpc::ClientContext* context, const ::raft::rpc::ReplyAppendEntries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>* AsyncReplyVRaw(::grpc::ClientContext* context, const ::raft::rpc::ReplyVote& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>* PrepareAsyncReplyVRaw(::grpc::ClientContext* context, const ::raft::rpc::ReplyVote& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RequestAE_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestV_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplyAE_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplyV_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RequestAE(::grpc::ServerContext* context, const ::raft::rpc::RequestAppendEntries* request, ::raft::rpc::Reply* response);
    virtual ::grpc::Status RequestV(::grpc::ServerContext* context, const ::raft::rpc::RequestVote* request, ::raft::rpc::Reply* response);
    virtual ::grpc::Status ReplyAE(::grpc::ServerContext* context, const ::raft::rpc::ReplyAppendEntries* request, ::raft::rpc::Reply* response);
    virtual ::grpc::Status ReplyV(::grpc::ServerContext* context, const ::raft::rpc::ReplyVote* request, ::raft::rpc::Reply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestAE : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RequestAE() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RequestAE() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestAE(::grpc::ServerContext* context, const ::raft::rpc::RequestAppendEntries* request, ::raft::rpc::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestAE(::grpc::ServerContext* context, ::raft::rpc::RequestAppendEntries* request, ::grpc::ServerAsyncResponseWriter< ::raft::rpc::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RequestV() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RequestV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestV(::grpc::ServerContext* context, const ::raft::rpc::RequestVote* request, ::raft::rpc::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestV(::grpc::ServerContext* context, ::raft::rpc::RequestVote* request, ::grpc::ServerAsyncResponseWriter< ::raft::rpc::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplyAE : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ReplyAE() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ReplyAE() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplyAE(::grpc::ServerContext* context, const ::raft::rpc::ReplyAppendEntries* request, ::raft::rpc::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplyAE(::grpc::ServerContext* context, ::raft::rpc::ReplyAppendEntries* request, ::grpc::ServerAsyncResponseWriter< ::raft::rpc::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplyV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ReplyV() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ReplyV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplyV(::grpc::ServerContext* context, const ::raft::rpc::ReplyVote* request, ::raft::rpc::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplyV(::grpc::ServerContext* context, ::raft::rpc::ReplyVote* request, ::grpc::ServerAsyncResponseWriter< ::raft::rpc::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RequestAE<WithAsyncMethod_RequestV<WithAsyncMethod_ReplyAE<WithAsyncMethod_ReplyV<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RequestAE : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_RequestAE() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::raft::rpc::RequestAppendEntries, ::raft::rpc::Reply>(
          [this](::grpc::ServerContext* context,
                 const ::raft::rpc::RequestAppendEntries* request,
                 ::raft::rpc::Reply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->RequestAE(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_RequestAE() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestAE(::grpc::ServerContext* context, const ::raft::rpc::RequestAppendEntries* request, ::raft::rpc::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RequestAE(::grpc::ServerContext* context, const ::raft::rpc::RequestAppendEntries* request, ::raft::rpc::Reply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RequestV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_RequestV() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::raft::rpc::RequestVote, ::raft::rpc::Reply>(
          [this](::grpc::ServerContext* context,
                 const ::raft::rpc::RequestVote* request,
                 ::raft::rpc::Reply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->RequestV(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_RequestV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestV(::grpc::ServerContext* context, const ::raft::rpc::RequestVote* request, ::raft::rpc::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RequestV(::grpc::ServerContext* context, const ::raft::rpc::RequestVote* request, ::raft::rpc::Reply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReplyAE : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ReplyAE() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::raft::rpc::ReplyAppendEntries, ::raft::rpc::Reply>(
          [this](::grpc::ServerContext* context,
                 const ::raft::rpc::ReplyAppendEntries* request,
                 ::raft::rpc::Reply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ReplyAE(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_ReplyAE() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplyAE(::grpc::ServerContext* context, const ::raft::rpc::ReplyAppendEntries* request, ::raft::rpc::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReplyAE(::grpc::ServerContext* context, const ::raft::rpc::ReplyAppendEntries* request, ::raft::rpc::Reply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReplyV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ReplyV() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::raft::rpc::ReplyVote, ::raft::rpc::Reply>(
          [this](::grpc::ServerContext* context,
                 const ::raft::rpc::ReplyVote* request,
                 ::raft::rpc::Reply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ReplyV(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_ReplyV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplyV(::grpc::ServerContext* context, const ::raft::rpc::ReplyVote* request, ::raft::rpc::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReplyV(::grpc::ServerContext* context, const ::raft::rpc::ReplyVote* request, ::raft::rpc::Reply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_RequestAE<ExperimentalWithCallbackMethod_RequestV<ExperimentalWithCallbackMethod_ReplyAE<ExperimentalWithCallbackMethod_ReplyV<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RequestAE : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RequestAE() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RequestAE() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestAE(::grpc::ServerContext* context, const ::raft::rpc::RequestAppendEntries* request, ::raft::rpc::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RequestV() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RequestV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestV(::grpc::ServerContext* context, const ::raft::rpc::RequestVote* request, ::raft::rpc::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplyAE : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ReplyAE() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ReplyAE() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplyAE(::grpc::ServerContext* context, const ::raft::rpc::ReplyAppendEntries* request, ::raft::rpc::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplyV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ReplyV() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ReplyV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplyV(::grpc::ServerContext* context, const ::raft::rpc::ReplyVote* request, ::raft::rpc::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestAE : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RequestAE() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RequestAE() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestAE(::grpc::ServerContext* context, const ::raft::rpc::RequestAppendEntries* request, ::raft::rpc::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestAE(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RequestV() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RequestV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestV(::grpc::ServerContext* context, const ::raft::rpc::RequestVote* request, ::raft::rpc::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestV(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplyAE : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ReplyAE() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ReplyAE() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplyAE(::grpc::ServerContext* context, const ::raft::rpc::ReplyAppendEntries* request, ::raft::rpc::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplyAE(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplyV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ReplyV() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ReplyV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplyV(::grpc::ServerContext* context, const ::raft::rpc::ReplyVote* request, ::raft::rpc::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplyV(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RequestAE : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_RequestAE() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->RequestAE(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_RequestAE() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestAE(::grpc::ServerContext* context, const ::raft::rpc::RequestAppendEntries* request, ::raft::rpc::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RequestAE(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RequestV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_RequestV() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->RequestV(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_RequestV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestV(::grpc::ServerContext* context, const ::raft::rpc::RequestVote* request, ::raft::rpc::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RequestV(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReplyAE : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ReplyAE() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ReplyAE(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ReplyAE() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplyAE(::grpc::ServerContext* context, const ::raft::rpc::ReplyAppendEntries* request, ::raft::rpc::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReplyAE(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReplyV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ReplyV() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ReplyV(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ReplyV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplyV(::grpc::ServerContext* context, const ::raft::rpc::ReplyVote* request, ::raft::rpc::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReplyV(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestAE : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RequestAE() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::raft::rpc::RequestAppendEntries, ::raft::rpc::Reply>(std::bind(&WithStreamedUnaryMethod_RequestAE<BaseClass>::StreamedRequestAE, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RequestAE() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestAE(::grpc::ServerContext* context, const ::raft::rpc::RequestAppendEntries* request, ::raft::rpc::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestAE(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raft::rpc::RequestAppendEntries,::raft::rpc::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RequestV() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::raft::rpc::RequestVote, ::raft::rpc::Reply>(std::bind(&WithStreamedUnaryMethod_RequestV<BaseClass>::StreamedRequestV, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RequestV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestV(::grpc::ServerContext* context, const ::raft::rpc::RequestVote* request, ::raft::rpc::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestV(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raft::rpc::RequestVote,::raft::rpc::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplyAE : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ReplyAE() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::raft::rpc::ReplyAppendEntries, ::raft::rpc::Reply>(std::bind(&WithStreamedUnaryMethod_ReplyAE<BaseClass>::StreamedReplyAE, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ReplyAE() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplyAE(::grpc::ServerContext* context, const ::raft::rpc::ReplyAppendEntries* request, ::raft::rpc::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplyAE(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raft::rpc::ReplyAppendEntries,::raft::rpc::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplyV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ReplyV() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::raft::rpc::ReplyVote, ::raft::rpc::Reply>(std::bind(&WithStreamedUnaryMethod_ReplyV<BaseClass>::StreamedReplyV, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ReplyV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplyV(::grpc::ServerContext* context, const ::raft::rpc::ReplyVote* request, ::raft::rpc::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplyV(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raft::rpc::ReplyVote,::raft::rpc::Reply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RequestAE<WithStreamedUnaryMethod_RequestV<WithStreamedUnaryMethod_ReplyAE<WithStreamedUnaryMethod_ReplyV<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RequestAE<WithStreamedUnaryMethod_RequestV<WithStreamedUnaryMethod_ReplyAE<WithStreamedUnaryMethod_ReplyV<Service > > > > StreamedService;
};

}  // namespace rpc
}  // namespace raft


#endif  // GRPC_raft_2eproto__INCLUDED
