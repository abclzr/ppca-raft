// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#ifndef PROTOBUF_INCLUDED_raft_2eproto
#define PROTOBUF_INCLUDED_raft_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raft_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_raft_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_raft_2eproto();
namespace raft {
namespace rpc {
class Entry;
class EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class Reply;
class ReplyDefaultTypeInternal;
extern ReplyDefaultTypeInternal _Reply_default_instance_;
class ReplyAppendEntries;
class ReplyAppendEntriesDefaultTypeInternal;
extern ReplyAppendEntriesDefaultTypeInternal _ReplyAppendEntries_default_instance_;
class ReplyVote;
class ReplyVoteDefaultTypeInternal;
extern ReplyVoteDefaultTypeInternal _ReplyVote_default_instance_;
class RequestAppendEntries;
class RequestAppendEntriesDefaultTypeInternal;
extern RequestAppendEntriesDefaultTypeInternal _RequestAppendEntries_default_instance_;
class RequestVote;
class RequestVoteDefaultTypeInternal;
extern RequestVoteDefaultTypeInternal _RequestVote_default_instance_;
}  // namespace rpc
}  // namespace raft
namespace google {
namespace protobuf {
template<> ::raft::rpc::Entry* Arena::CreateMaybeMessage<::raft::rpc::Entry>(Arena*);
template<> ::raft::rpc::Reply* Arena::CreateMaybeMessage<::raft::rpc::Reply>(Arena*);
template<> ::raft::rpc::ReplyAppendEntries* Arena::CreateMaybeMessage<::raft::rpc::ReplyAppendEntries>(Arena*);
template<> ::raft::rpc::ReplyVote* Arena::CreateMaybeMessage<::raft::rpc::ReplyVote>(Arena*);
template<> ::raft::rpc::RequestAppendEntries* Arena::CreateMaybeMessage<::raft::rpc::RequestAppendEntries>(Arena*);
template<> ::raft::rpc::RequestVote* Arena::CreateMaybeMessage<::raft::rpc::RequestVote>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace raft {
namespace rpc {

// ===================================================================

class Reply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft.rpc.Reply) */ {
 public:
  Reply();
  virtual ~Reply();

  Reply(const Reply& from);

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Reply(Reply&& from) noexcept
    : Reply() {
    *this = ::std::move(from);
  }

  inline Reply& operator=(Reply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Reply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reply* internal_default_instance() {
    return reinterpret_cast<const Reply*>(
               &_Reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Reply* other);
  friend void swap(Reply& a, Reply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Reply* New() const final {
    return CreateMaybeMessage<Reply>(nullptr);
  }

  Reply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Reply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft.rpc.Reply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class Entry final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft.rpc.Entry) */ {
 public:
  Entry();
  virtual ~Entry();

  Entry(const Entry& from);

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Entry* other);
  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Entry* New() const final {
    return CreateMaybeMessage<Entry>(nullptr);
  }

  Entry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Entry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string args = 3;
  void clear_args();
  static const int kArgsFieldNumber = 3;
  const ::std::string& args() const;
  void set_args(const ::std::string& value);
  #if LANG_CXX11
  void set_args(::std::string&& value);
  #endif
  void set_args(const char* value);
  void set_args(const char* value, size_t size);
  ::std::string* mutable_args();
  ::std::string* release_args();
  void set_allocated_args(::std::string* args);

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft.rpc.Entry)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr args_;
  ::google::protobuf::uint64 term_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class RequestAppendEntries final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft.rpc.RequestAppendEntries) */ {
 public:
  RequestAppendEntries();
  virtual ~RequestAppendEntries();

  RequestAppendEntries(const RequestAppendEntries& from);

  inline RequestAppendEntries& operator=(const RequestAppendEntries& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestAppendEntries(RequestAppendEntries&& from) noexcept
    : RequestAppendEntries() {
    *this = ::std::move(from);
  }

  inline RequestAppendEntries& operator=(RequestAppendEntries&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RequestAppendEntries& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestAppendEntries* internal_default_instance() {
    return reinterpret_cast<const RequestAppendEntries*>(
               &_RequestAppendEntries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RequestAppendEntries* other);
  friend void swap(RequestAppendEntries& a, RequestAppendEntries& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestAppendEntries* New() const final {
    return CreateMaybeMessage<RequestAppendEntries>(nullptr);
  }

  RequestAppendEntries* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RequestAppendEntries>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RequestAppendEntries& from);
  void MergeFrom(const RequestAppendEntries& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestAppendEntries* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .raft.rpc.Entry entries = 5;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 5;
  ::raft::rpc::Entry* mutable_entries(int index);
  ::google::protobuf::RepeatedPtrField< ::raft::rpc::Entry >*
      mutable_entries();
  const ::raft::rpc::Entry& entries(int index) const;
  ::raft::rpc::Entry* add_entries();
  const ::google::protobuf::RepeatedPtrField< ::raft::rpc::Entry >&
      entries() const;

  // string leaderID = 2;
  void clear_leaderid();
  static const int kLeaderIDFieldNumber = 2;
  const ::std::string& leaderid() const;
  void set_leaderid(const ::std::string& value);
  #if LANG_CXX11
  void set_leaderid(::std::string&& value);
  #endif
  void set_leaderid(const char* value);
  void set_leaderid(const char* value, size_t size);
  ::std::string* mutable_leaderid();
  ::std::string* release_leaderid();
  void set_allocated_leaderid(::std::string* leaderid);

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // uint64 prevLogIndex = 3;
  void clear_prevlogindex();
  static const int kPrevLogIndexFieldNumber = 3;
  ::google::protobuf::uint64 prevlogindex() const;
  void set_prevlogindex(::google::protobuf::uint64 value);

  // uint64 prevLogTerm = 4;
  void clear_prevlogterm();
  static const int kPrevLogTermFieldNumber = 4;
  ::google::protobuf::uint64 prevlogterm() const;
  void set_prevlogterm(::google::protobuf::uint64 value);

  // uint64 leaderCommit = 6;
  void clear_leadercommit();
  static const int kLeaderCommitFieldNumber = 6;
  ::google::protobuf::uint64 leadercommit() const;
  void set_leadercommit(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft.rpc.RequestAppendEntries)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::raft::rpc::Entry > entries_;
  ::google::protobuf::internal::ArenaStringPtr leaderid_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 prevlogindex_;
  ::google::protobuf::uint64 prevlogterm_;
  ::google::protobuf::uint64 leadercommit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class ReplyAppendEntries final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft.rpc.ReplyAppendEntries) */ {
 public:
  ReplyAppendEntries();
  virtual ~ReplyAppendEntries();

  ReplyAppendEntries(const ReplyAppendEntries& from);

  inline ReplyAppendEntries& operator=(const ReplyAppendEntries& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReplyAppendEntries(ReplyAppendEntries&& from) noexcept
    : ReplyAppendEntries() {
    *this = ::std::move(from);
  }

  inline ReplyAppendEntries& operator=(ReplyAppendEntries&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReplyAppendEntries& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplyAppendEntries* internal_default_instance() {
    return reinterpret_cast<const ReplyAppendEntries*>(
               &_ReplyAppendEntries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ReplyAppendEntries* other);
  friend void swap(ReplyAppendEntries& a, ReplyAppendEntries& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReplyAppendEntries* New() const final {
    return CreateMaybeMessage<ReplyAppendEntries>(nullptr);
  }

  ReplyAppendEntries* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReplyAppendEntries>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReplyAppendEntries& from);
  void MergeFrom(const ReplyAppendEntries& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplyAppendEntries* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string followerID = 3;
  void clear_followerid();
  static const int kFollowerIDFieldNumber = 3;
  const ::std::string& followerid() const;
  void set_followerid(const ::std::string& value);
  #if LANG_CXX11
  void set_followerid(::std::string&& value);
  #endif
  void set_followerid(const char* value);
  void set_followerid(const char* value, size_t size);
  ::std::string* mutable_followerid();
  ::std::string* release_followerid();
  void set_allocated_followerid(::std::string* followerid);

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // bool ans = 2;
  void clear_ans();
  static const int kAnsFieldNumber = 2;
  bool ans() const;
  void set_ans(bool value);

  // @@protoc_insertion_point(class_scope:raft.rpc.ReplyAppendEntries)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr followerid_;
  ::google::protobuf::uint64 term_;
  bool ans_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class RequestVote final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft.rpc.RequestVote) */ {
 public:
  RequestVote();
  virtual ~RequestVote();

  RequestVote(const RequestVote& from);

  inline RequestVote& operator=(const RequestVote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestVote(RequestVote&& from) noexcept
    : RequestVote() {
    *this = ::std::move(from);
  }

  inline RequestVote& operator=(RequestVote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RequestVote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVote* internal_default_instance() {
    return reinterpret_cast<const RequestVote*>(
               &_RequestVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RequestVote* other);
  friend void swap(RequestVote& a, RequestVote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestVote* New() const final {
    return CreateMaybeMessage<RequestVote>(nullptr);
  }

  RequestVote* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RequestVote>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RequestVote& from);
  void MergeFrom(const RequestVote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string candidateID = 2;
  void clear_candidateid();
  static const int kCandidateIDFieldNumber = 2;
  const ::std::string& candidateid() const;
  void set_candidateid(const ::std::string& value);
  #if LANG_CXX11
  void set_candidateid(::std::string&& value);
  #endif
  void set_candidateid(const char* value);
  void set_candidateid(const char* value, size_t size);
  ::std::string* mutable_candidateid();
  ::std::string* release_candidateid();
  void set_allocated_candidateid(::std::string* candidateid);

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // uint64 lastLogIndex = 3;
  void clear_lastlogindex();
  static const int kLastLogIndexFieldNumber = 3;
  ::google::protobuf::uint64 lastlogindex() const;
  void set_lastlogindex(::google::protobuf::uint64 value);

  // uint64 lastLogTerm = 4;
  void clear_lastlogterm();
  static const int kLastLogTermFieldNumber = 4;
  ::google::protobuf::uint64 lastlogterm() const;
  void set_lastlogterm(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft.rpc.RequestVote)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr candidateid_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 lastlogindex_;
  ::google::protobuf::uint64 lastlogterm_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class ReplyVote final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft.rpc.ReplyVote) */ {
 public:
  ReplyVote();
  virtual ~ReplyVote();

  ReplyVote(const ReplyVote& from);

  inline ReplyVote& operator=(const ReplyVote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReplyVote(ReplyVote&& from) noexcept
    : ReplyVote() {
    *this = ::std::move(from);
  }

  inline ReplyVote& operator=(ReplyVote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReplyVote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplyVote* internal_default_instance() {
    return reinterpret_cast<const ReplyVote*>(
               &_ReplyVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ReplyVote* other);
  friend void swap(ReplyVote& a, ReplyVote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReplyVote* New() const final {
    return CreateMaybeMessage<ReplyVote>(nullptr);
  }

  ReplyVote* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReplyVote>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReplyVote& from);
  void MergeFrom(const ReplyVote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplyVote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string followerID = 3;
  void clear_followerid();
  static const int kFollowerIDFieldNumber = 3;
  const ::std::string& followerid() const;
  void set_followerid(const ::std::string& value);
  #if LANG_CXX11
  void set_followerid(::std::string&& value);
  #endif
  void set_followerid(const char* value);
  void set_followerid(const char* value, size_t size);
  ::std::string* mutable_followerid();
  ::std::string* release_followerid();
  void set_allocated_followerid(::std::string* followerid);

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // bool ans = 2;
  void clear_ans();
  static const int kAnsFieldNumber = 2;
  bool ans() const;
  void set_ans(bool value);

  // @@protoc_insertion_point(class_scope:raft.rpc.ReplyVote)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr followerid_;
  ::google::protobuf::uint64 term_;
  bool ans_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Reply

// -------------------------------------------------------------------

// Entry

// uint64 term = 1;
inline void Entry::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Entry::term() const {
  // @@protoc_insertion_point(field_get:raft.rpc.Entry.term)
  return term_;
}
inline void Entry::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft.rpc.Entry.term)
}

// string key = 2;
inline void Entry::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Entry::key() const {
  // @@protoc_insertion_point(field_get:raft.rpc.Entry.key)
  return key_.GetNoArena();
}
inline void Entry::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft.rpc.Entry.key)
}
#if LANG_CXX11
inline void Entry::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft.rpc.Entry.key)
}
#endif
inline void Entry::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft.rpc.Entry.key)
}
inline void Entry::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft.rpc.Entry.key)
}
inline ::std::string* Entry::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raft.rpc.Entry.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Entry::release_key() {
  // @@protoc_insertion_point(field_release:raft.rpc.Entry.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft.rpc.Entry.key)
}

// string args = 3;
inline void Entry::clear_args() {
  args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Entry::args() const {
  // @@protoc_insertion_point(field_get:raft.rpc.Entry.args)
  return args_.GetNoArena();
}
inline void Entry::set_args(const ::std::string& value) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft.rpc.Entry.args)
}
#if LANG_CXX11
inline void Entry::set_args(::std::string&& value) {
  
  args_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft.rpc.Entry.args)
}
#endif
inline void Entry::set_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft.rpc.Entry.args)
}
inline void Entry::set_args(const char* value, size_t size) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft.rpc.Entry.args)
}
inline ::std::string* Entry::mutable_args() {
  
  // @@protoc_insertion_point(field_mutable:raft.rpc.Entry.args)
  return args_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Entry::release_args() {
  // @@protoc_insertion_point(field_release:raft.rpc.Entry.args)
  
  return args_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_args(::std::string* args) {
  if (args != nullptr) {
    
  } else {
    
  }
  args_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), args);
  // @@protoc_insertion_point(field_set_allocated:raft.rpc.Entry.args)
}

// -------------------------------------------------------------------

// RequestAppendEntries

// uint64 term = 1;
inline void RequestAppendEntries::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RequestAppendEntries::term() const {
  // @@protoc_insertion_point(field_get:raft.rpc.RequestAppendEntries.term)
  return term_;
}
inline void RequestAppendEntries::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft.rpc.RequestAppendEntries.term)
}

// string leaderID = 2;
inline void RequestAppendEntries::clear_leaderid() {
  leaderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestAppendEntries::leaderid() const {
  // @@protoc_insertion_point(field_get:raft.rpc.RequestAppendEntries.leaderID)
  return leaderid_.GetNoArena();
}
inline void RequestAppendEntries::set_leaderid(const ::std::string& value) {
  
  leaderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft.rpc.RequestAppendEntries.leaderID)
}
#if LANG_CXX11
inline void RequestAppendEntries::set_leaderid(::std::string&& value) {
  
  leaderid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft.rpc.RequestAppendEntries.leaderID)
}
#endif
inline void RequestAppendEntries::set_leaderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leaderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft.rpc.RequestAppendEntries.leaderID)
}
inline void RequestAppendEntries::set_leaderid(const char* value, size_t size) {
  
  leaderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft.rpc.RequestAppendEntries.leaderID)
}
inline ::std::string* RequestAppendEntries::mutable_leaderid() {
  
  // @@protoc_insertion_point(field_mutable:raft.rpc.RequestAppendEntries.leaderID)
  return leaderid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestAppendEntries::release_leaderid() {
  // @@protoc_insertion_point(field_release:raft.rpc.RequestAppendEntries.leaderID)
  
  return leaderid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestAppendEntries::set_allocated_leaderid(::std::string* leaderid) {
  if (leaderid != nullptr) {
    
  } else {
    
  }
  leaderid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leaderid);
  // @@protoc_insertion_point(field_set_allocated:raft.rpc.RequestAppendEntries.leaderID)
}

// uint64 prevLogIndex = 3;
inline void RequestAppendEntries::clear_prevlogindex() {
  prevlogindex_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RequestAppendEntries::prevlogindex() const {
  // @@protoc_insertion_point(field_get:raft.rpc.RequestAppendEntries.prevLogIndex)
  return prevlogindex_;
}
inline void RequestAppendEntries::set_prevlogindex(::google::protobuf::uint64 value) {
  
  prevlogindex_ = value;
  // @@protoc_insertion_point(field_set:raft.rpc.RequestAppendEntries.prevLogIndex)
}

// uint64 prevLogTerm = 4;
inline void RequestAppendEntries::clear_prevlogterm() {
  prevlogterm_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RequestAppendEntries::prevlogterm() const {
  // @@protoc_insertion_point(field_get:raft.rpc.RequestAppendEntries.prevLogTerm)
  return prevlogterm_;
}
inline void RequestAppendEntries::set_prevlogterm(::google::protobuf::uint64 value) {
  
  prevlogterm_ = value;
  // @@protoc_insertion_point(field_set:raft.rpc.RequestAppendEntries.prevLogTerm)
}

// repeated .raft.rpc.Entry entries = 5;
inline int RequestAppendEntries::entries_size() const {
  return entries_.size();
}
inline void RequestAppendEntries::clear_entries() {
  entries_.Clear();
}
inline ::raft::rpc::Entry* RequestAppendEntries::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:raft.rpc.RequestAppendEntries.entries)
  return entries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::raft::rpc::Entry >*
RequestAppendEntries::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:raft.rpc.RequestAppendEntries.entries)
  return &entries_;
}
inline const ::raft::rpc::Entry& RequestAppendEntries::entries(int index) const {
  // @@protoc_insertion_point(field_get:raft.rpc.RequestAppendEntries.entries)
  return entries_.Get(index);
}
inline ::raft::rpc::Entry* RequestAppendEntries::add_entries() {
  // @@protoc_insertion_point(field_add:raft.rpc.RequestAppendEntries.entries)
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::raft::rpc::Entry >&
RequestAppendEntries::entries() const {
  // @@protoc_insertion_point(field_list:raft.rpc.RequestAppendEntries.entries)
  return entries_;
}

// uint64 leaderCommit = 6;
inline void RequestAppendEntries::clear_leadercommit() {
  leadercommit_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RequestAppendEntries::leadercommit() const {
  // @@protoc_insertion_point(field_get:raft.rpc.RequestAppendEntries.leaderCommit)
  return leadercommit_;
}
inline void RequestAppendEntries::set_leadercommit(::google::protobuf::uint64 value) {
  
  leadercommit_ = value;
  // @@protoc_insertion_point(field_set:raft.rpc.RequestAppendEntries.leaderCommit)
}

// -------------------------------------------------------------------

// ReplyAppendEntries

// uint64 term = 1;
inline void ReplyAppendEntries::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ReplyAppendEntries::term() const {
  // @@protoc_insertion_point(field_get:raft.rpc.ReplyAppendEntries.term)
  return term_;
}
inline void ReplyAppendEntries::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft.rpc.ReplyAppendEntries.term)
}

// bool ans = 2;
inline void ReplyAppendEntries::clear_ans() {
  ans_ = false;
}
inline bool ReplyAppendEntries::ans() const {
  // @@protoc_insertion_point(field_get:raft.rpc.ReplyAppendEntries.ans)
  return ans_;
}
inline void ReplyAppendEntries::set_ans(bool value) {
  
  ans_ = value;
  // @@protoc_insertion_point(field_set:raft.rpc.ReplyAppendEntries.ans)
}

// string followerID = 3;
inline void ReplyAppendEntries::clear_followerid() {
  followerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReplyAppendEntries::followerid() const {
  // @@protoc_insertion_point(field_get:raft.rpc.ReplyAppendEntries.followerID)
  return followerid_.GetNoArena();
}
inline void ReplyAppendEntries::set_followerid(const ::std::string& value) {
  
  followerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft.rpc.ReplyAppendEntries.followerID)
}
#if LANG_CXX11
inline void ReplyAppendEntries::set_followerid(::std::string&& value) {
  
  followerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft.rpc.ReplyAppendEntries.followerID)
}
#endif
inline void ReplyAppendEntries::set_followerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  followerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft.rpc.ReplyAppendEntries.followerID)
}
inline void ReplyAppendEntries::set_followerid(const char* value, size_t size) {
  
  followerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft.rpc.ReplyAppendEntries.followerID)
}
inline ::std::string* ReplyAppendEntries::mutable_followerid() {
  
  // @@protoc_insertion_point(field_mutable:raft.rpc.ReplyAppendEntries.followerID)
  return followerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReplyAppendEntries::release_followerid() {
  // @@protoc_insertion_point(field_release:raft.rpc.ReplyAppendEntries.followerID)
  
  return followerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReplyAppendEntries::set_allocated_followerid(::std::string* followerid) {
  if (followerid != nullptr) {
    
  } else {
    
  }
  followerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), followerid);
  // @@protoc_insertion_point(field_set_allocated:raft.rpc.ReplyAppendEntries.followerID)
}

// -------------------------------------------------------------------

// RequestVote

// uint64 term = 1;
inline void RequestVote::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RequestVote::term() const {
  // @@protoc_insertion_point(field_get:raft.rpc.RequestVote.term)
  return term_;
}
inline void RequestVote::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft.rpc.RequestVote.term)
}

// string candidateID = 2;
inline void RequestVote::clear_candidateid() {
  candidateid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestVote::candidateid() const {
  // @@protoc_insertion_point(field_get:raft.rpc.RequestVote.candidateID)
  return candidateid_.GetNoArena();
}
inline void RequestVote::set_candidateid(const ::std::string& value) {
  
  candidateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft.rpc.RequestVote.candidateID)
}
#if LANG_CXX11
inline void RequestVote::set_candidateid(::std::string&& value) {
  
  candidateid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft.rpc.RequestVote.candidateID)
}
#endif
inline void RequestVote::set_candidateid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  candidateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft.rpc.RequestVote.candidateID)
}
inline void RequestVote::set_candidateid(const char* value, size_t size) {
  
  candidateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft.rpc.RequestVote.candidateID)
}
inline ::std::string* RequestVote::mutable_candidateid() {
  
  // @@protoc_insertion_point(field_mutable:raft.rpc.RequestVote.candidateID)
  return candidateid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestVote::release_candidateid() {
  // @@protoc_insertion_point(field_release:raft.rpc.RequestVote.candidateID)
  
  return candidateid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestVote::set_allocated_candidateid(::std::string* candidateid) {
  if (candidateid != nullptr) {
    
  } else {
    
  }
  candidateid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), candidateid);
  // @@protoc_insertion_point(field_set_allocated:raft.rpc.RequestVote.candidateID)
}

// uint64 lastLogIndex = 3;
inline void RequestVote::clear_lastlogindex() {
  lastlogindex_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RequestVote::lastlogindex() const {
  // @@protoc_insertion_point(field_get:raft.rpc.RequestVote.lastLogIndex)
  return lastlogindex_;
}
inline void RequestVote::set_lastlogindex(::google::protobuf::uint64 value) {
  
  lastlogindex_ = value;
  // @@protoc_insertion_point(field_set:raft.rpc.RequestVote.lastLogIndex)
}

// uint64 lastLogTerm = 4;
inline void RequestVote::clear_lastlogterm() {
  lastlogterm_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RequestVote::lastlogterm() const {
  // @@protoc_insertion_point(field_get:raft.rpc.RequestVote.lastLogTerm)
  return lastlogterm_;
}
inline void RequestVote::set_lastlogterm(::google::protobuf::uint64 value) {
  
  lastlogterm_ = value;
  // @@protoc_insertion_point(field_set:raft.rpc.RequestVote.lastLogTerm)
}

// -------------------------------------------------------------------

// ReplyVote

// uint64 term = 1;
inline void ReplyVote::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ReplyVote::term() const {
  // @@protoc_insertion_point(field_get:raft.rpc.ReplyVote.term)
  return term_;
}
inline void ReplyVote::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft.rpc.ReplyVote.term)
}

// bool ans = 2;
inline void ReplyVote::clear_ans() {
  ans_ = false;
}
inline bool ReplyVote::ans() const {
  // @@protoc_insertion_point(field_get:raft.rpc.ReplyVote.ans)
  return ans_;
}
inline void ReplyVote::set_ans(bool value) {
  
  ans_ = value;
  // @@protoc_insertion_point(field_set:raft.rpc.ReplyVote.ans)
}

// string followerID = 3;
inline void ReplyVote::clear_followerid() {
  followerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReplyVote::followerid() const {
  // @@protoc_insertion_point(field_get:raft.rpc.ReplyVote.followerID)
  return followerid_.GetNoArena();
}
inline void ReplyVote::set_followerid(const ::std::string& value) {
  
  followerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft.rpc.ReplyVote.followerID)
}
#if LANG_CXX11
inline void ReplyVote::set_followerid(::std::string&& value) {
  
  followerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft.rpc.ReplyVote.followerID)
}
#endif
inline void ReplyVote::set_followerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  followerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft.rpc.ReplyVote.followerID)
}
inline void ReplyVote::set_followerid(const char* value, size_t size) {
  
  followerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft.rpc.ReplyVote.followerID)
}
inline ::std::string* ReplyVote::mutable_followerid() {
  
  // @@protoc_insertion_point(field_mutable:raft.rpc.ReplyVote.followerID)
  return followerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReplyVote::release_followerid() {
  // @@protoc_insertion_point(field_release:raft.rpc.ReplyVote.followerID)
  
  return followerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReplyVote::set_allocated_followerid(::std::string* followerid) {
  if (followerid != nullptr) {
    
  } else {
    
  }
  followerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), followerid);
  // @@protoc_insertion_point(field_set_allocated:raft.rpc.ReplyVote.followerID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace raft

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_raft_2eproto
