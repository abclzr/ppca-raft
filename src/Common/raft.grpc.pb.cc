// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: raft.proto

#include "raft.pb.h"
#include "raft.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace raft {
namespace rpc {

static const char* RaftRpc_method_names[] = {
  "/raft.rpc.RaftRpc/RequestAE",
  "/raft.rpc.RaftRpc/RequestV",
  "/raft.rpc.RaftRpc/ReplyAE",
  "/raft.rpc.RaftRpc/ReplyV",
};

std::unique_ptr< RaftRpc::Stub> RaftRpc::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RaftRpc::Stub> stub(new RaftRpc::Stub(channel));
  return stub;
}

RaftRpc::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RequestAE_(RaftRpc_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestV_(RaftRpc_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReplyAE_(RaftRpc_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReplyV_(RaftRpc_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RaftRpc::Stub::RequestAE(::grpc::ClientContext* context, const ::raft::rpc::RequestAppendEntries& request, ::raft::rpc::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RequestAE_, context, request, response);
}

void RaftRpc::Stub::experimental_async::RequestAE(::grpc::ClientContext* context, const ::raft::rpc::RequestAppendEntries* request, ::raft::rpc::Reply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestAE_, context, request, response, std::move(f));
}

void RaftRpc::Stub::experimental_async::RequestAE(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raft::rpc::Reply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestAE_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>* RaftRpc::Stub::AsyncRequestAERaw(::grpc::ClientContext* context, const ::raft::rpc::RequestAppendEntries& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::raft::rpc::Reply>::Create(channel_.get(), cq, rpcmethod_RequestAE_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>* RaftRpc::Stub::PrepareAsyncRequestAERaw(::grpc::ClientContext* context, const ::raft::rpc::RequestAppendEntries& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::raft::rpc::Reply>::Create(channel_.get(), cq, rpcmethod_RequestAE_, context, request, false);
}

::grpc::Status RaftRpc::Stub::RequestV(::grpc::ClientContext* context, const ::raft::rpc::RequestVote& request, ::raft::rpc::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RequestV_, context, request, response);
}

void RaftRpc::Stub::experimental_async::RequestV(::grpc::ClientContext* context, const ::raft::rpc::RequestVote* request, ::raft::rpc::Reply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestV_, context, request, response, std::move(f));
}

void RaftRpc::Stub::experimental_async::RequestV(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raft::rpc::Reply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestV_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>* RaftRpc::Stub::AsyncRequestVRaw(::grpc::ClientContext* context, const ::raft::rpc::RequestVote& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::raft::rpc::Reply>::Create(channel_.get(), cq, rpcmethod_RequestV_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>* RaftRpc::Stub::PrepareAsyncRequestVRaw(::grpc::ClientContext* context, const ::raft::rpc::RequestVote& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::raft::rpc::Reply>::Create(channel_.get(), cq, rpcmethod_RequestV_, context, request, false);
}

::grpc::Status RaftRpc::Stub::ReplyAE(::grpc::ClientContext* context, const ::raft::rpc::ReplyAppendEntries& request, ::raft::rpc::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReplyAE_, context, request, response);
}

void RaftRpc::Stub::experimental_async::ReplyAE(::grpc::ClientContext* context, const ::raft::rpc::ReplyAppendEntries* request, ::raft::rpc::Reply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReplyAE_, context, request, response, std::move(f));
}

void RaftRpc::Stub::experimental_async::ReplyAE(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raft::rpc::Reply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReplyAE_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>* RaftRpc::Stub::AsyncReplyAERaw(::grpc::ClientContext* context, const ::raft::rpc::ReplyAppendEntries& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::raft::rpc::Reply>::Create(channel_.get(), cq, rpcmethod_ReplyAE_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>* RaftRpc::Stub::PrepareAsyncReplyAERaw(::grpc::ClientContext* context, const ::raft::rpc::ReplyAppendEntries& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::raft::rpc::Reply>::Create(channel_.get(), cq, rpcmethod_ReplyAE_, context, request, false);
}

::grpc::Status RaftRpc::Stub::ReplyV(::grpc::ClientContext* context, const ::raft::rpc::ReplyVote& request, ::raft::rpc::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReplyV_, context, request, response);
}

void RaftRpc::Stub::experimental_async::ReplyV(::grpc::ClientContext* context, const ::raft::rpc::ReplyVote* request, ::raft::rpc::Reply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReplyV_, context, request, response, std::move(f));
}

void RaftRpc::Stub::experimental_async::ReplyV(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raft::rpc::Reply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReplyV_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>* RaftRpc::Stub::AsyncReplyVRaw(::grpc::ClientContext* context, const ::raft::rpc::ReplyVote& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::raft::rpc::Reply>::Create(channel_.get(), cq, rpcmethod_ReplyV_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::raft::rpc::Reply>* RaftRpc::Stub::PrepareAsyncReplyVRaw(::grpc::ClientContext* context, const ::raft::rpc::ReplyVote& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::raft::rpc::Reply>::Create(channel_.get(), cq, rpcmethod_ReplyV_, context, request, false);
}

RaftRpc::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RaftRpc_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RaftRpc::Service, ::raft::rpc::RequestAppendEntries, ::raft::rpc::Reply>(
          std::mem_fn(&RaftRpc::Service::RequestAE), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RaftRpc_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RaftRpc::Service, ::raft::rpc::RequestVote, ::raft::rpc::Reply>(
          std::mem_fn(&RaftRpc::Service::RequestV), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RaftRpc_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RaftRpc::Service, ::raft::rpc::ReplyAppendEntries, ::raft::rpc::Reply>(
          std::mem_fn(&RaftRpc::Service::ReplyAE), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RaftRpc_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RaftRpc::Service, ::raft::rpc::ReplyVote, ::raft::rpc::Reply>(
          std::mem_fn(&RaftRpc::Service::ReplyV), this)));
}

RaftRpc::Service::~Service() {
}

::grpc::Status RaftRpc::Service::RequestAE(::grpc::ServerContext* context, const ::raft::rpc::RequestAppendEntries* request, ::raft::rpc::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RaftRpc::Service::RequestV(::grpc::ServerContext* context, const ::raft::rpc::RequestVote* request, ::raft::rpc::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RaftRpc::Service::ReplyAE(::grpc::ServerContext* context, const ::raft::rpc::ReplyAppendEntries* request, ::raft::rpc::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RaftRpc::Service::ReplyV(::grpc::ServerContext* context, const ::raft::rpc::ReplyVote* request, ::raft::rpc::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace raft
}  // namespace rpc

